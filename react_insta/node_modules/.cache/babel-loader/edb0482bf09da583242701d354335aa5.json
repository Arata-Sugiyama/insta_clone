{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst apiUrlPost = `${process.env.REACT_APP_DEV_API_URL}api/post/`;\nconst apiUrlComment = `${process.env.REACT_APP_DEV_API_URL}api/comment/`;\nexport const fetchAsyncGetPosts = createAsyncThunk(\"post/get\", async () => {\n  const res = await axios.get(apiUrlPost, {\n    headers: {\n      Authorization: `JMT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncNewPost = createAsyncThunk(\"post/post\", async newPost => {\n  const uploadData = new FormData();\n  uploadData.append(\"title\", newPost.title);\n  newPost.img && uploadData.append(\"img\", newPost.img, newPost.img.name);\n  const res = await axios.post(apiUrlPost, uploadData, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncPatchLiked = createAsyncThunk(\"post/patch\", async liked => {\n  const currentLiked = liked.current;\n  const uploadData = new FormData();\n  let isOverlapped = false;\n  currentLiked.forEach(current => {\n    if (current == liked.new) {\n      isOverlapped = true;\n    } else {\n      uploadData.append(\"liked\", String(current));\n    }\n  });\n\n  if (isOverlapped) {\n    uploadData.append(\"liked\", String(liked.new));\n  } else if (currentLiked.length === 1) {\n    uploadData.append(\"title\", liked.title);\n    const res = await axios.put(`${apiUrlPost}${liked.id}/`, uploadData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`\n      }\n    });\n    return res.data;\n  }\n\n  const res = await axios.patch(`${apiUrlPost}${liked.id}/`, uploadData, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncGetComments = createAsyncThunk(\"comment/get\", async () => {\n  const res = await axios.get(apiUrlComment, {\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncPostComments = createAsyncThunk(\"comment/post\", async comment => {\n  const res = await axios.post(apiUrlComment, comment, {\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const postSlice = createSlice({\n  name: 'post',\n  initialState: {\n    isLoadingPost: false,\n    openNewPost: false,\n    posts: [{\n      id: 0,\n      title: \"\",\n      userPost: 0,\n      created_on: \"\",\n      img: \"\",\n      liked: [0]\n    }],\n    comments: [{\n      id: 0,\n      text: \"\",\n      userComment: 0,\n      post: 0\n    }]\n  },\n  reducers: {\n    fetchPostStart(state) {\n      state.isLoadingPost = true;\n    },\n\n    fetchPostEnd(state) {\n      state.isLoadingPost = false;\n    },\n\n    setOpenNewPost(state) {\n      state.openNewPost = true;\n    },\n\n    resetOpenNewPost(state) {\n      state.openNewPost = false;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncGetPosts.fulfilled, (state, action) => {\n      return { ...state,\n        posts: action.payload\n      };\n    });\n    builder.addCase(fetchAsyncNewPost.fulfilled, (state, action) => {\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n    });\n    builder.addCase(fetchAsyncGetComments.fulfilled, (state, action) => {\n      return { ...state,\n        comments: action.payload\n      };\n    });\n    builder.addCase(fetchAsyncPostComment.fulfilled, (state, action) => {\n      return { ...state,\n        comments: [...state.comments, action.payload]\n      };\n    });\n    builder.addCase(fetchAsyncPatchLiked.fulfilled, (state, action) => {\n      return { ...state,\n        posts: state.posts.map(post => post.id === action.payload.id ? action.payload : post)\n      };\n    });\n  }\n});\nexport const {\n  fetchPostStart,\n  fetchPostEnd,\n  setOpenNewPost,\n  resetOpenNewPost\n} = postSlice.actions;\nexport const selectIsLoadingAuth = state => state.post.isLoadingAuth;\nexport const selectOpenNewPost = state => state.post.openNewPost;\nexport const selectPosts = state => state.post.posts;\nexport const selectComments = state => state.post.comments;\nexport default postSlice.reducer;","map":{"version":3,"sources":["/Users/sugiyamaarata/Documents/react_insta/src/features/post/postSlice.ts"],"names":["createSlice","createAsyncThunk","axios","apiUrlPost","process","env","REACT_APP_DEV_API_URL","apiUrlComment","fetchAsyncGetPosts","res","get","headers","Authorization","localStorage","localJWT","data","fetchAsyncNewPost","newPost","uploadData","FormData","append","title","img","name","post","fetchAsyncPatchLiked","liked","currentLiked","current","isOverlapped","forEach","new","String","length","put","id","patch","fetchAsyncGetComments","fetchAsyncPostComments","comment","postSlice","initialState","isLoadingPost","openNewPost","posts","userPost","created_on","comments","text","userComment","reducers","fetchPostStart","state","fetchPostEnd","setOpenNewPost","resetOpenNewPost","extraReducers","builder","addCase","fulfilled","action","payload","fetchAsyncPostComment","map","actions","selectIsLoadingAuth","isLoadingAuth","selectOpenNewPost","selectPosts","selectComments","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport axios from 'axios';\nimport { PROPS_NEWPOST, PROPS_LIKED, PROPS_COMMENT } from '../types';\n\nconst apiUrlPost = `${process.env.REACT_APP_DEV_API_URL}api/post/`;\nconst apiUrlComment = `${process.env.REACT_APP_DEV_API_URL}api/comment/`;\n\nexport const fetchAsyncGetPosts = createAsyncThunk(\"post/get\",async () => {\n  const res = await axios.get(apiUrlPost,{\n    headers:{\n      Authorization: `JMT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data;\n}\n);\n\nexport const fetchAsyncNewPost = createAsyncThunk(\n  \"post/post\",\n  async (newPost: PROPS_NEWPOST) => {\n    const uploadData = new FormData();\n    uploadData.append(\"title\", newPost.title);\n    newPost.img && uploadData.append(\"img\",newPost.img, newPost.img.name);\n    const res = await axios.post(apiUrlPost,uploadData,{\n      headers:{\n        \"Content-Type\":\"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const fetchAsyncPatchLiked = createAsyncThunk(\n  \"post/patch\",\n  async (liked: PROPS_LIKED) => {\n    const currentLiked = liked.current;\n    const uploadData = new FormData();\n\n    let isOverlapped = false;\n    currentLiked.forEach((current) => {\n      if (current == liked.new){\n        isOverlapped = true;\n      }else{\n        uploadData.append(\"liked\",String(current));\n      }\n    });\n\n    if(isOverlapped){\n      uploadData.append(\"liked\",String(liked.new));\n    }else if(currentLiked.length === 1){\n      uploadData.append(\"title\",liked.title);\n      const res = await axios.put(`${apiUrlPost}${liked.id}/`,uploadData,{\n        headers:{\n          \"Content-Type\":\"application/json\",\n          Authorization: `JWT ${localStorage.localJWT}`,\n        },\n      });\n      return res.data;\n    }\n    const res = await axios.patch(`${apiUrlPost}${liked.id}/`,uploadData,{\n      headers:{\n        \"Content-Type\":\"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const fetchAsyncGetComments = createAsyncThunk(\n  \"comment/get\",\n  async () => {\n    const res = await axios.get(apiUrlComment,{\n      headers:{\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const fetchAsyncPostComments = createAsyncThunk(\n  \"comment/post\",\n  async (comment: PROPS_COMMENT)=>{\n    const res = await axios.post(apiUrlComment,comment,{\n      headers: {Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data;\n}\n);\n\nexport const postSlice = createSlice({\n  name: 'post',\n  initialState: {\n    isLoadingPost: false,\n    openNewPost: false,\n    posts:[\n      {\n        id:0,\n        title:\"\",\n        userPost:0,\n        created_on:\"\",\n        img:\"\",\n        liked:[0],\n      },\n    ],\n    comments:[\n      {\n        id:0,\n        text:\"\",\n        userComment:0,\n        post:0,\n      },\n    ],\n  },\n  reducers: {\n    fetchPostStart(state){\n      state.isLoadingPost = true;\n    },\n    fetchPostEnd(state){\n      state.isLoadingPost = false;\n    },\n    setOpenNewPost(state){\n      state.openNewPost = true;\n    },\n    resetOpenNewPost(state){\n      state.openNewPost = false;\n    },\n  },\n  extraReducers:(builder)=>{\n    builder.addCase(fetchAsyncGetPosts.fulfilled,(state,action)=>{\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncNewPost.fulfilled, (state,action) =>{\n      return {\n        ...state,\n        posts: [...state.posts,action.payload],\n      };\n    });\n    builder.addCase(fetchAsyncGetComments.fulfilled, (state,action) => {\n      return {\n        ...state,\n        comments: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncPostComment.fulfilled, (state,action)=>{\n      return {\n        ...state,\n        comments: [...state.comments, action.payload],\n      };\n    });\n    builder.addCase(fetchAsyncPatchLiked.fulfilled, (state,action) =>{\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n      post.id === action.payload.id ? action.payload :post\n    ),\n  };\n});\n  },\n});\n\nexport const {\n  fetchPostStart,\n  fetchPostEnd,\n  setOpenNewPost,\n  resetOpenNewPost,\n  } = postSlice.actions;\n\nexport const selectIsLoadingAuth = (state: RootState) =>\nstate.post.isLoadingAuth;\nexport const selectOpenNewPost = (state: RootState) => state.post.openNewPost;\nexport const selectPosts = (state: RootState) => state.post.posts;\nexport const selectComments = (state: RootState) => state.post.comments;\n\nexport default postSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}