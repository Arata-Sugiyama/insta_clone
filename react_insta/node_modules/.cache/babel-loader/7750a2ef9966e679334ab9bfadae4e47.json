{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst apiUrl = process.env.REACT_APP_DEV_API_URL;\nexport const fetchAsyncLogin = createAsyncThunk(\"auth/post\", async authen => {\n  const res = await axios.post(`${apiUrl}authen/jwt/create`, authen, {\n    headers: {\n      \"Content-Type\": \"application/jwt\"\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncRegister = createAsyncThunk(\"auth/register\", async auth => {\n  const res = await axios.post(`${apiUrl}api/register`, auth, {\n    headers: {\n      \"Content-Type\": \"application/jwt\"\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncCreateProf = createAsyncThunk(\"profile/post\", async nickName => {\n  const res = await axios.post(`${apiUrl}api/profile`, nickName, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncUpdateProf = createAsyncThunk(\"profile/put\", async profile => {\n  const uploadData = new FormData();\n  uploadData.append(\"nickName\", profile.nickName);\n  profile.img && uploadData.append(\"img\", profile.img.name);\n  const res = await axios.put(`${apiUrl}api/profile/${profile.id}/`, uploadData, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncGetMyProf = createAsyncThunk(\"profile/get\", async () => {\n  const res = await axios.get('${apiUrl}api/myprofile/', {\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data[0];\n});\nexport const fetchAsyncGetProf = createAsyncThunk(\"profiles/get\", async () => {\n  const res = await axios.get('${apiUrl}api/profile/', {\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`\n    }\n  });\n  return res.data;\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    openSignIn: true,\n    openSignUp: false,\n    openProfile: false,\n    isLoadingAuth: false,\n    myprofile: {\n      id: 0,\n      nickName: \"\",\n      userProfile: 0,\n      created_on: \"\",\n      img: \"\"\n    },\n    profiles: [{\n      id: 0,\n      nickName: \"\",\n      userProfile: 0,\n      created_on: \"\",\n      img: \"\"\n    }]\n  },\n  reducers: {\n    fetchCredStart(state) {\n      state.isLoadingAuth = true;\n    },\n\n    fetchCredEnd(state) {\n      state.isLoadingAuth = false;\n    },\n\n    setOpenSignIn(state) {\n      state.openSignIn = true;\n    },\n\n    resetOpenSignIn(state) {\n      state.openSignIn = false;\n    },\n\n    setOpenSignUp(state) {\n      state.openSignUp = true;\n    },\n\n    resetOpenSignUp(state) {\n      state.openSignUp = false;\n    },\n\n    setOpenProfile(state) {\n      state.openProfile = true;\n    },\n\n    resetOpenProfile(state) {\n      state.openProfile = false;\n    },\n\n    editNickname(state, action) {\n      state.myprofile.nickName = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      localStorange.setItem(\"localJWT\", action.payload.access);\n    });\n    builder.addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetProf.fulfilled, (state, action) => {\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchAsyncUpdateProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n      state.profiles = state.profiles.map(prof => prof.id === action.payload.id ? action.payload : prof);\n    });\n  }\n});\nexport const {\n  fetchCredStart,\n  fetchCredEnd,\n  setOpenSignIn,\n  resetOpenSignIn,\n  setOpenSignUp,\n  resetOpenSignUp,\n  setOpenProfile,\n  resetOpenProfile,\n  editNickname\n} = authSlice.actions;\nexport const selectCount = state => state.counter.value;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/sugiyamaarata/Documents/react_insta/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","axios","apiUrl","process","env","REACT_APP_DEV_API_URL","fetchAsyncLogin","authen","res","post","headers","data","fetchAsyncRegister","auth","fetchAsyncCreateProf","nickName","Authorization","localStorage","localJWT","fetchAsyncUpdateProf","profile","uploadData","FormData","append","img","name","put","id","fetchAsyncGetMyProf","get","fetchAsyncGetProf","authSlice","initialState","openSignIn","openSignUp","openProfile","isLoadingAuth","myprofile","userProfile","created_on","profiles","reducers","fetchCredStart","state","fetchCredEnd","setOpenSignIn","resetOpenSignIn","setOpenSignUp","resetOpenSignUp","setOpenProfile","resetOpenProfile","editNickname","action","payload","extraReducers","builder","addCase","fulfilled","localStorange","setItem","access","map","prof","actions","selectCount","counter","value","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport axios from 'axios';\nimport { PROPS_AUTHEN, PROPS_PROFILE, PROPS_NICKNAME} from '../types';\n\nconst apiUrl = process.env.REACT_APP_DEV_API_URL;\n\nexport const fetchAsyncLogin = createAsyncThunk(\n  \"auth/post\",\n  async(authen:PROPS_AUTHEN)=>{\n    const res = await axios.post(`${apiUrl}authen/jwt/create`,authen,{\n      headers:{\n        \"Content-Type\": \"application/jwt\",\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncRegister = createAsyncThunk(\n  \"auth/register\",\n  async(auth:PROPS_AUTHEN)=>{\n    const res = await axios.post(`${apiUrl}api/register`,auth,{\n      headers:{\n        \"Content-Type\": \"application/jwt\",\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncCreateProf = createAsyncThunk(\n  \"profile/post\",\n  async(nickName:PROPS_NICKNAME)=>{\n    const res = await axios.post(`${apiUrl}api/profile`,nickName,{\n      headers:{\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncUpdateProf = createAsyncThunk(\n  \"profile/put\",\n  async(profile:PROPS_NICKNAME)=>{\n    const uploadData = new FormData();\n    uploadData.append(\"nickName\",profile.nickName);\n    profile.img && uploadData.append(\"img\",profile.img.name);\n    const res = await axios.put(\n      `${apiUrl}api/profile/${profile.id}/`,uploadData,\n      {\n      headers:{\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncGetMyProf = createAsyncThunk(\"profile/get\", async()=>{\n  const res = await axios.get('${apiUrl}api/myprofile/',{\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data[0];\n});\n\nexport const fetchAsyncGetProf = createAsyncThunk(\"profiles/get\", async()=>{\n  const res = await axios.get('${apiUrl}api/profile/',{\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data;\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    openSignIn:true,\n    openSignUp:false,\n    openProfile:false,\n    isLoadingAuth:false,\n    myprofile:{\n      id:0,\n      nickName:\"\",\n      userProfile:0,\n      created_on:\"\",\n      img:\"\",\n    },\n    profiles:[\n      {\n        id:0,\n        nickName:\"\",\n        userProfile:0,\n        created_on:\"\",\n        img:\"\",\n      },\n    ],\n  },\n  reducers: {\n    fetchCredStart(state){\n      state.isLoadingAuth = true;\n    },\n    fetchCredEnd(state){\n      state.isLoadingAuth = false;\n    },\n    setOpenSignIn(state){\n      state.openSignIn = true;\n    },\n    resetOpenSignIn(state){\n      state.openSignIn = false;\n    },\n    setOpenSignUp(state){\n      state.openSignUp = true;\n    },\n    resetOpenSignUp(state){\n      state.openSignUp = false;\n    },\n    setOpenProfile(state){\n      state.openProfile = true;\n    },\n    resetOpenProfile(state){\n      state.openProfile = false;\n    },\n    editNickname(state,action){\n      state.myprofile.nickName = action.payload;\n    },\n  },\n  extraReducers:(builder)=>{\n    builder.addCase(fetchAsyncLogin.fulfilled,(state,action)=>{\n      localStorange.setItem(\"localJWT\",action.payload.access);\n    });\n    builder.addCase(fetchAsyncCreateProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetMyProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetProf.fulfilled,(state,action)=>{\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchAsyncUpdateProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n      state.profiles = state.profiles.map((prof)=>\n      prof.id === action.payload.id ? action.payload : prof\n    );\n    });\n  },\n});\n\nexport const { fetchCredStart,\n               fetchCredEnd,\n               setOpenSignIn,\n               resetOpenSignIn,\n               setOpenSignUp,\n               resetOpenSignUp,\n               setOpenProfile,\n               resetOpenProfile,\n               editNickname,\n             } = authSlice.actions;\n\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}