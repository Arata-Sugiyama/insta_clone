{"ast":null,"code":"var _jsxFileName = \"/Users/sugiyamaarata/Documents/insta_app/react_insta/src/features/auth/Auth.tsx\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./Auth.module.css\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport { object, string } from \"yup\";\nimport { TextField, Button, CircularProgress } from \"@material-ui/core\";\nimport { fetchAsyncGetPosts, fetchAsyncGetComments } from \"../post/postSlice\";\nimport { selectIsLoadingAuth, selectOpenSignIn, selectOpenSignUp, setOpenSignIn, resetOpenSignIn, setOpenSignUp, resetOpenSignUp, fetchCredStart, fetchCredEnd, fetchAsyncLogin, fetchAsyncRegister, fetchAsyncGetMyProf, fetchAsyncGetProfs, fetchAsyncCreateProf } from \"./authSlice\";\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"#777777\"\n  },\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nconst Auth = () => {\n  Modal.setAppElement(\"#root\");\n  const openSignIn = useSelector(selectOpenSignIn);\n  const openSignUp = useSelector(selectOpenSignUp);\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: openSignUp,\n    onRequestClose: async () => {\n      await dispatch(resetOpenSignUp());\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialErrors: {\n      email: \"required\"\n    },\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: async values => {\n      await dispatch(fetchCredStart());\n      const resultReg = await dispatch(fetchAsyncRegister(values));\n\n      if (fetchAsyncRegister.fulfilled.match(resultReg)) {\n        await dispatch(fetchAsyncLogin(values));\n        await dispatch(fetchAsyncCreateProf({\n          nickName: \"anonymous\"\n        }));\n        await dispatch(fetchAsyncGetProfs());\n        await dispatch(fetchAsyncGetPosts());\n        await dispatch(fetchAsyncGetComments());\n        await dispatch(fetchAsyncGetMyProf());\n      }\n\n      await dispatch(fetchCredEnd());\n      await dispatch(resetOpenSignUp());\n    },\n    validationSchema: object.shape({\n      email: string.email(\"email format is wrong\").required(\"email is must\"),\n      password: string.required(\"password is must\").min(4)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, ({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    errors,\n    touched,\n    isValid\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_signUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.auth_title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, \"SNS clone\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, isLoadingAuth && /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 39\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"email\",\n    type: \"input\",\n    name: \"email\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  }), touched.email && errors.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, errors.email) : null, /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"password\",\n    type: \"password\",\n    name: \"password\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }), touched.password && errors.password ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, errors.password) : null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !isValid,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.auth_text,\n    onClick: async () => {\n      await dispatch(setOpenSignIn());\n      await dispatch(resetOpenSignUp());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }, \"You already have a account ?\")))))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: openSignIn,\n    onRequestClose: async () => {\n      await dispatch(resetOpenSignIn());\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialErrors: {\n      email: \"required\"\n    },\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: async values => {\n      await dispatch(fetchCredStart());\n      const result = await dispatch(fetchAsyncLogin(values));\n\n      if (fetchAsyncLogin.fulfilled.match(result)) {\n        await dispatch(fetchAsyncGetProfs());\n        await dispatch(fetchAsyncGetPosts());\n        await dispatch(fetchAsyncGetComments());\n        await dispatch(fetchAsyncGetMyProf());\n      }\n\n      await dispatch(fetchCredEnd());\n      await dispatch(resetOpenSignIn());\n    },\n    validationSchema: object.shape({\n      email: string.email(\"email format is wrong\").required(\"email is must\"),\n      password: string.required(\"password is must\").min(4)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, ({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    errors,\n    touched,\n    isValid\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_signUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.auth_title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  }, \"SNS clone\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }, isLoadingAuth && /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 39\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"email\",\n    type: \"input\",\n    name: \"email\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 19\n    }\n  }), touched.email && errors.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }, errors.email) : null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"password\",\n    type: \"password\",\n    name: \"password\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }\n  }), touched.password && errors.password ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.auth_error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 21\n    }\n  }, errors.password) : null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !isValid,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.auth_text,\n    onClick: async () => {\n      await dispatch(resetOpenSignIn());\n      await dispatch(setOpenSignUp());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, \"You don't have a account ?\")))))));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/sugiyamaarata/Documents/insta_app/react_insta/src/features/auth/Auth.tsx"],"names":["React","useSelector","useDispatch","styles","Modal","Formik","object","string","TextField","Button","CircularProgress","fetchAsyncGetPosts","fetchAsyncGetComments","selectIsLoadingAuth","selectOpenSignIn","selectOpenSignUp","setOpenSignIn","resetOpenSignIn","setOpenSignUp","resetOpenSignUp","fetchCredStart","fetchCredEnd","fetchAsyncLogin","fetchAsyncRegister","fetchAsyncGetMyProf","fetchAsyncGetProfs","fetchAsyncCreateProf","customStyles","overlay","backgroundColor","content","top","left","width","height","padding","transform","Auth","setAppElement","openSignIn","openSignUp","isLoadingAuth","dispatch","email","password","values","resultReg","fulfilled","match","nickName","shape","required","min","handleSubmit","handleChange","handleBlur","errors","touched","isValid","auth_signUp","auth_title","auth_progress","auth_error","auth_text","result"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { AppDispatch } from \"../../app/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./Auth.module.css\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport {object,string} from \"yup\";\nimport { TextField, Button, CircularProgress } from \"@material-ui/core\";\n\nimport { fetchAsyncGetPosts, fetchAsyncGetComments } from \"../post/postSlice\";\n\nimport {\n  selectIsLoadingAuth,\n  selectOpenSignIn,\n  selectOpenSignUp,\n  setOpenSignIn,\n  resetOpenSignIn,\n  setOpenSignUp,\n  resetOpenSignUp,\n  fetchCredStart,\n  fetchCredEnd,\n  fetchAsyncLogin,\n  fetchAsyncRegister,\n  fetchAsyncGetMyProf,\n  fetchAsyncGetProfs,\n  fetchAsyncCreateProf,\n} from \"./authSlice\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"#777777\",\n  },\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst Auth: React.FC = () => {\n  Modal.setAppElement(\"#root\");\n  const openSignIn = useSelector(selectOpenSignIn);\n  const openSignUp = useSelector(selectOpenSignUp);\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  const dispatch: AppDispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        isOpen={openSignUp}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignUp());\n        }}\n        style={customStyles}\n      >\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const resultReg = await dispatch(fetchAsyncRegister(values));\n\n            if (fetchAsyncRegister.fulfilled.match(resultReg)) {\n              await dispatch(fetchAsyncLogin(values));\n              await dispatch(fetchAsyncCreateProf({ nickName: \"anonymous\" }));\n\n              await dispatch(fetchAsyncGetProfs());\n              await dispatch(fetchAsyncGetPosts());\n              await dispatch(fetchAsyncGetComments());\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignUp());\n          }}\n          validationSchema={object.shape({\n            email: string\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: string.required(\"password is must\").min(4),\n          })}\n        >\n          {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            errors,\n            touched,\n            isValid,\n          }) => (\n            <div>\n              <form onSubmit={handleSubmit}>\n                <div className={styles.auth_signUp}>\n                  <h1 className={styles.auth_title}>SNS clone</h1>\n                  <br />\n                  <div className={styles.auth_progress}>\n                    {isLoadingAuth && <CircularProgress />}\n                  </div>\n                  <br />\n\n                  <TextField\n                    placeholder=\"email\"\n                    type=\"input\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                  />\n                  <br />\n                  {touched.email && errors.email ? (\n                    <div className={styles.auth_error}>{errors.email}</div>\n                  ) : null}\n\n                  <TextField\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                  />\n                  {touched.password && errors.password ? (\n                    <div className={styles.auth_error}>{errors.password}</div>\n                  ) : null}\n                  <br />\n                  <br />\n\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!isValid}\n                    type=\"submit\"\n                  >\n                    Register\n                  </Button>\n                  <br />\n                  <br />\n                  <span\n                    className={styles.auth_text}\n                    onClick={async () => {\n                      await dispatch(setOpenSignIn());\n                      await dispatch(resetOpenSignUp());\n                    }}\n                  >\n                    You already have a account ?\n                  </span>\n                </div>\n              </form>\n            </div>\n          )}\n        </Formik>\n      </Modal>\n\n      <Modal\n        isOpen={openSignIn}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignIn());\n        }}\n        style={customStyles}\n      >\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const result = await dispatch(fetchAsyncLogin(values));\n            if (fetchAsyncLogin.fulfilled.match(result)) {\n              await dispatch(fetchAsyncGetProfs());\n              await dispatch(fetchAsyncGetPosts());\n              await dispatch(fetchAsyncGetComments());\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignIn());\n          }}\n          validationSchema={object.shape({\n            email: string\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: string.required(\"password is must\").min(4),\n          })}\n        >\n          {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            errors,\n            touched,\n            isValid,\n          }) => (\n            <div>\n              <form onSubmit={handleSubmit}>\n                <div className={styles.auth_signUp}>\n                  <h1 className={styles.auth_title}>SNS clone</h1>\n                  <br />\n                  <div className={styles.auth_progress}>\n                    {isLoadingAuth && <CircularProgress />}\n                  </div>\n                  <br />\n\n                  <TextField\n                    placeholder=\"email\"\n                    type=\"input\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                  />\n\n                  {touched.email && errors.email ? (\n                    <div className={styles.auth_error}>{errors.email}</div>\n                  ) : null}\n                  <br />\n\n                  <TextField\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                  />\n                  {touched.password && errors.password ? (\n                    <div className={styles.auth_error}>{errors.password}</div>\n                  ) : null}\n                  <br />\n                  <br />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!isValid}\n                    type=\"submit\"\n                  >\n                    Login\n                  </Button>\n                  <br />\n                  <br />\n                  <span\n                    className={styles.auth_text}\n                    onClick={async () => {\n                      await dispatch(resetOpenSignIn());\n                      await dispatch(setOpenSignUp());\n                    }}\n                  >\n                    You don't have a account ?\n                  </span>\n                </div>\n              </form>\n            </div>\n          )}\n        </Formik>\n      </Modal>\n    </>\n  );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}