{"version":3,"sources":["App.module.css","features/auth/authSlice.ts","features/auth/Auth.tsx","features/core/Core.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/auth/Auth.module.css"],"names":["module","exports","apiUrl","process","fetchAsyncLogin","createAsyncThunk","authen","a","axios","post","headers","res","data","fetchAsyncRegister","auth","fetchAsyncCreateProf","nickName","Authorization","localStorage","localJWT","fetchAsyncUpdateProf","profile","uploadData","FormData","append","img","name","put","id","fetchAsyncGetMyProf","get","fetchAsyncGetProfs","authSlice","createSlice","initialState","openSignIn","openSignUp","openProfile","isLoadingAuth","myprofile","userProfile","created_on","profiles","reducers","fetchCredStart","state","fetchCredEnd","setOpenSignIn","resetOpenSignIn","setOpenSignUp","resetOpenSignUp","setOpenProfile","resetOpenProfile","editNickname","action","payload","extraReducers","builder","addCase","fulfilled","setItem","access","map","prof","actions","selectIsLoadingAuth","selectOpenSignIn","selectOpenSignUp","customStyles","overlay","backgroundColor","content","top","left","width","height","padding","transform","Auth","Modal","setAppElement","useSelector","dispatch","useDispatch","isOpen","onRequestClose","style","initialErrors","email","initialValues","password","onSubmit","values","resultReg","match","validationSchema","object","shape","string","required","min","handleSubmit","handleChange","handleBlur","touched","isValid","errors","className","styles","auth_signUp","auth_title","auth_progress","CircularProgress","TextField","placeholder","type","onChange","onBlur","value","auth_error","Button","variant","color","disabled","auth_text","onClick","result","passeord","Core","App","app","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","authReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48d01a24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport axios from 'axios';\nimport { PROPS_AUTHEN, PROPS_PROFILE, PROPS_NICKNAME} from '../types';\n\nconst apiUrl = process.env.REACT_APP_DEV_API_URL;\n\nexport const fetchAsyncLogin = createAsyncThunk(\n  \"auth/post\",\n  async (authen: PROPS_AUTHEN) => {\n    const res = await axios.post(`${apiUrl}authen/jwt/create`,authen,{\n      headers:{\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncRegister = createAsyncThunk(\n  \"auth/register\",\n  async(auth:PROPS_AUTHEN)=>{\n    const res = await axios.post(`${apiUrl}api/register`,auth,{\n      headers:{\n        \"Content-Type\": \"application/jwt\",\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncCreateProf = createAsyncThunk(\n  \"profile/post\",\n  async(nickName:PROPS_NICKNAME)=>{\n    const res = await axios.post(`${apiUrl}api/profile`,nickName,{\n      headers:{\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncUpdateProf = createAsyncThunk(\n  \"profile/put\",\n  async(profile:PROPS_PROFILE)=>{\n    const uploadData = new FormData();\n    uploadData.append(\"nickName\",profile.nickName);\n    profile.img && uploadData.append(\"img\",profile.img,profile.img.name);\n    const res = await axios.put(\n      `${apiUrl}api/profile/${profile.id}/`,uploadData,\n      {\n      headers:{\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n  return res.data;\n  }\n);\n\nexport const fetchAsyncGetMyProf = createAsyncThunk(\"profile/get\", async()=>{\n  const res = await axios.get(`${apiUrl}api/myprofile/`,{\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data[0];\n});\n\nexport const fetchAsyncGetProfs = createAsyncThunk(\"profiles/get\", async()=>{\n  const res = await axios.get(`${apiUrl}api/profile/`,{\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data;\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    openSignIn:true,\n    openSignUp:false,\n    openProfile:false,\n    isLoadingAuth:false,\n    myprofile:{\n      id:0,\n      nickName:\"\",\n      userProfile:0,\n      created_on:\"\",\n      img:\"\",\n    },\n    profiles:[\n      {\n        id:0,\n        nickName:\"\",\n        userProfile:0,\n        created_on:\"\",\n        img:\"\",\n      },\n    ],\n  },\n  reducers: {\n    fetchCredStart(state){\n      state.isLoadingAuth = true;\n    },\n    fetchCredEnd(state){\n      state.isLoadingAuth = false;\n    },\n    setOpenSignIn(state){\n      state.openSignIn = true;\n    },\n    resetOpenSignIn(state){\n      state.openSignIn = false;\n    },\n    setOpenSignUp(state){\n      state.openSignUp = true;\n    },\n    resetOpenSignUp(state){\n      state.openSignUp = false;\n    },\n    setOpenProfile(state){\n      state.openProfile = true;\n    },\n    resetOpenProfile(state){\n      state.openProfile = false;\n    },\n    editNickname(state,action){\n      state.myprofile.nickName = action.payload;\n    },\n  },\n  extraReducers:(builder)=>{\n    builder.addCase(fetchAsyncLogin.fulfilled,(state,action)=>{\n      localStorage.setItem(\"localJWT\",action.payload.access);\n    });\n    builder.addCase(fetchAsyncCreateProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetMyProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetProfs.fulfilled,(state,action)=>{\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchAsyncUpdateProf.fulfilled,(state,action)=>{\n      state.myprofile = action.payload;\n      state.profiles = state.profiles.map((prof)=>\n      prof.id === action.payload.id ? action.payload : prof\n    );\n    });\n  },\n});\n\nexport const { fetchCredStart,\n               fetchCredEnd,\n               setOpenSignIn,\n               resetOpenSignIn,\n               setOpenSignUp,\n               resetOpenSignUp,\n               setOpenProfile,\n               resetOpenProfile,\n               editNickname,\n             } = authSlice.actions;\n\nexport const selectIsLoadingAuth = (state: RootState) =>\nstate.auth.isLoadingAuth;\nexport const selectOpenSignIn = (state: RootState) => state.auth.openSignIn;\nexport const selectOpenSignUp = (state: RootState) => state.auth.openSignUp;\nexport const selectOpenProfile = (state: RootState) => state.auth.openProfile;\nexport const selectProfile = (state: RootState) => state.auth.myprofile;\nexport const selectProfiles = (state: RootState) => state.auth.profiles;\n\nexport default authSlice.reducer;\n","import React from \"react\";\nimport { AppDispatch } from \"../../app/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./Auth.module.css\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport { object, string } from \"yup\"\nimport { TextField, Button, CircularProgress } from \"@material-ui/core\";\nimport {\n  selectIsLoadingAuth,\n  selectOpenSignIn,\n  selectOpenSignUp,\n  setOpenSignIn,\n  resetOpenSignIn,\n  setOpenSignUp,\n  resetOpenSignUp,\n  fetchCredStart,\n  fetchCredEnd,\n  fetchAsyncLogin,\n  fetchAsyncRegister,\n  fetchAsyncGetMyProf,\n  fetchAsyncGetProfs,\n  fetchAsyncCreateProf,\n} from \"./authSlice\";\n\nconst customStyles = {\n  overlay:{\n    backgroundColor:\"#777777\",\n  },\n  content:{\n    top:\"55%\",\n    left:\"50%\",\n\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst Auth: React.FC = () =>{\n  Modal.setAppElement(\"#root\");\n  const openSignIn = useSelector(selectOpenSignIn);\n  const openSignUp = useSelector(selectOpenSignUp);\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  const dispatch: AppDispatch = useDispatch();\n\n  return (\n    <>\n    <Modal\n    isOpen={openSignUp}\n    onRequestClose={async () => {\n      await dispatch(resetOpenSignUp());\n    }}\n    style={customStyles}\n    >\n    <Formik\n    initialErrors={{ email: \"required\" }}\n    initialValues={{ email: \"\", password: \"\" }}\n    onSubmit={async (values) =>{\n      await dispatch(fetchCredStart());\n      const resultReg = await dispatch(fetchAsyncRegister(values));\n\n      if (fetchAsyncRegister.fulfilled.match(resultReg)){\n        await dispatch(fetchAsyncLogin(values));\n        await dispatch(fetchAsyncCreateProf({nickName:\"annonymous\"}));\n\n        await dispatch(fetchAsyncGetProfs());\n        //await dispath(fetchAsyncGetPosts());\n        //await dispatch(fetchAsyncGetComments());\n        await dispatch(fetchAsyncGetMyProf());\n      }\n      await dispatch(fetchCredEnd());\n      await dispatch(resetOpenSignUp());\n    }}\n\n    validationSchema={object().shape({\n      email: string()\n      .email(\"email format is wrong\")\n      .required(\"email is must\"),\n      password: string().required(\"password is must\").min(4),\n    })}\n    >\n    {({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      touched,\n      isValid,\n      errors\n    }) => <div>\n    <form onSubmit={handleSubmit}>\n    <div className={styles.auth_signUp}>\n    <h1 className={styles.auth_title}>SNS_clone</h1>\n    <br />\n    <div className={styles.auth_progress}>\n    {isLoadingAuth && <CircularProgress />}\n    </div>\n    <br />\n    <TextField\n    placeholder=\"email\"\n    type=\"input\"\n    name=\"email\"\n    onChange={handleChange}\n    onBlur={handleBlur}\n    value={values.email}\n    />\n    <br />\n    {touched.email && errors.email ? (\n      <div className={styles.auth_error}>{errors.email}</div>\n    ) : null}\n\n    <TextField\n    placeholder=\"password\"\n    type=\"password\"\n    name=\"password\"\n    onChange={handleChange}\n    onBlur={handleBlur}\n    value={values.password}\n    />\n    <br />\n    {touched.password && errors.password ? (\n      <div className={styles.auth_error}>{errors.password}</div>\n    ) : null}\n    <br />\n    <br />\n\n    <Button\n    variant=\"contained\"\n    color=\"primary\"\n    disabled={!isValid}\n    type=\"submit\">\n    Register\n    </Button>\n    <br />\n    <br />\n    <span\n    className={styles.auth_text}\n    onClick={async () => {\n      await dispatch(setOpenSignIn());\n      await dispatch(resetOpenSignUp());\n    }}\n    >\n    You already have a account?\n    </span>\n    </div>\n    </form>\n    </div>\n  }}\n    </Formik>\n    </Modal>\n\n    <Modal\n    isOpen={openSignIn}\n    onRequestClose={async () => {\n      await dispatch(resetOpenSignIn());\n    }}\n    style={customStyles}\n    >\n    <Formik\n    initialErrors={{ email: \"required\"}}\n    initialValues={{ email: \"\" , password: \"\" }}\n    onSubmit={async (values)=>{\n      await dispatch(fetchCredStart());\n      const result = await dispatch(fetchAsyncLogin(values));\n      if (fetchAsyncLogin.fulfilled.match(result)){\n        await dispatch(fetchAsyncGetProfs());\n        //await dispatch(fetchAsyncGetPosts());\n        //await dispatch(fetchAsyncGetComments());\n        await dispatch(fetchAsyncGetMyProf());\n      }\n      await dispatch(fetchCredEnd());\n      await dispatch(resetOpenSignIn());\n    }}\n    validationSchema={object().shape({\n      email: string()\n      .email(\"email format is wrong\")\n      .required(\"email is must\"),\n      passeord: string().required(\"passeord is must\").min(4),\n    })}\n    >\n    {({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      errors,\n      touched,\n      isValid,\n    }) => (\n      <div>\n      <form onSubmit={handleChange}>\n      <div className={styles.auth_signUp}>\n      <h1 className={styles.auth_title}>SNS_clone</h1>\n      <br />\n      <div className={styles.auth_progress}>\n      {isLoadingAuth && <CircularProgress />}\n      </div>\n      <br />\n      <TextField\n      placeholder=\"email\"\n      type=\"input\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n      />\n      {touched.email && errors.email ? (\n        <div className={styles.auth_error}>{errors.email}</div>\n      ) : null}\n      <br />\n\n      <TextField\n      placeholder=\"password\"\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n      />\n\n      {touched.password && errors.password ? (\n        <div className={styles.auth_error}>{errors.password}</div>\n      ) : null}\n      <br />\n      <br />\n      <Button\n      variant=\"contained\"\n      color=\"primary\"\n      disabled={!isValid}\n      type=\"submit\">\n      Login\n      </Button>\n      <br />\n      <br />\n      <span\n      className={styles.auth_text}\n      onClick={async () => {\n        await dispatch(resetOpenSignIn());\n        await dispatch(setOpenSignUp());\n      }}\n      >\n      You already have a account?\n      </span>\n      </div>\n      </form>\n      </div >\n\n    )}\n    </Formik>\n\n    </Modal>\n    </>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport Auth from \"../auth/Auth\";\n\nconst Core: React.FC =() => {\n  return <div>\n  <Auth />\n  </div>;\n}\n\nexport default Core;\n","import React from 'react';\r\n\r\nimport styles from './App.module.css';\r\nimport Core from \"./features/core/Core\";\r\n\r\nfunction App() {\r\n  return <div className={styles.app}>\r\n  <Core />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport authReducer from \"../features/auth/authSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    auth: authReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth_title\":\"Auth_auth_title__3IiVY\",\"auth_errot\":\"Auth_auth_errot__3yz82\",\"auth_signUp\":\"Auth_auth_signUp__23bGX\",\"auth_headerimage\":\"Auth_auth_headerimage__3OvYV\",\"auth_text\":\"Auth_auth_text__1NS5E\",\"auth_progress\":\"Auth_auth_progress__2Lo8w\"};"],"sourceRoot":""}